@startuml classes

abstract Bot {
    {abstract} +void init(State)
    {abstract} +Move choseBestMove(timeLimit)
    {abstract} +void performMove(Move)
    {abstract} +void resetGame()
    {abstract} +void setState(State)
    {abstract} +setAllPossiblesMoves()
}

enum BoardStatus {
    + XWin
    + OWin
    + Draw
    + InProgress
}

enum PlayerSymbol {
    + Empty
    + XMark
    + OMark
}

class Position {
    + int x
    + int y
}

class Agent {
    PlayerSymbol me
}

Agent --o PlayerSymbol

class HumanPlayer {

}

class HumanPlayer implements Agent
class Bot implements Agent

class MCTSAgent {
    -State state
}

class MiniMaxAgent {
    -State state
}

abstract Heuristics {
    
}

class Heuristic1 {

}

class Heuristic2 {

}

class State {
    - __uint128 smallFieldX
    - __uint128 smallFieldO
    - __uint16 bigFieldX
    - __uint16 bigFieldO
    + PlayerSymbol currentPlayer
    + Position lastPosition
    + void PerformMove(Position)
    + BoardStatus checkOverallStatus()
    + bool checkOverallStatus(PlayerSymbol)
    + BoardStatus checkSmallFieldStatus(Position)
    + bool checkSmallFieldStatus(Position, PlayerSymbol)
    + vector<Position> getAvailableMoves()
    + void reset()
}

State --o PlayerSymbol
State --o Position
State --o BoardStatus
class RandomAgent {
    
}

MiniMaxAgent --o State
MCTSAgent --o State
MiniMaxAgent --* Heuristics

class MCTSAgent implements Bot
class MiniMaxAgent implements Bot
class RandomAgent implements Bot

class Heuristic1 implements Heuristics
class Heuristic2 implements Heuristics

@enduml