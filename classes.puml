@startuml classes

abstract Bot {
    {abstract} +void init(State)
    {abstract} +Move choseBestMove(timeLimit)
    {abstract} +void performMove(Move)
    {abstract} +void resetGame()
    {abstract} +void setState(State)
    {abstract} +setAllPossiblesMoves()
}

enum BoardStatus {
    + XWin
    + OWin
    + Draw
    + InProgress
}

enum PlayerSymbol {
    + Empty
    + XMark
    + OMark
}

class Position {
    + int x
    + int y
}
package MCTS {
    class MCTSAgent {
        -Node* root
        -Node* selectPromisingNode()
        -{static} expandNode(Node*)
        -void backPropagation(Node*, BoardStatus, Node*)
        -{static} BoardStatus simulateRandonPlayout(Node*)
    }
    class Node {
        -State* state
        -Node* parent
        -vector<Node*> children
        -int visitCount
        -double winScore

        +State* getState()
        +Node* getParent()
        +vector<Node*>& getChildren()
        +void setParent(Node*)
        +void addChild(Node*)
        +Node* getRandomChildNode()
        +Node* getChildWithMaxScore()
        +{static} deleteTree(Node*, Node*)
        +int getVisitCount()
        +double getWinScore()
        +void setWinScore(double)
        +void incrementVisit()
        +void addScore(double)
    }
}

MCTSAgent --* Node

class State {
    - bitset<81> smallCellsX
    - bitset<81> smallCellsO
    - bitset<9> bigCellX
    - bitset<9> bigCellO
    - bitset<9> bigCellDraw
    - {static} int getSmallCellPosition(Position)
    - {static} int getBigCellPosition(Position)
    - bool isOccupied(Position)
    - bool isBigCellInProgress(Position)

    + PlayerSymbol currentPlayer
    + Position lastPosition
    + void PerformMove(Position)
    + BoardStatus checkOverallStatus()
    + bool checkOverallStatus(PlayerSymbol)
    + BoardStatus checkBigCellStatus(Position)
    + bool checkBigCellStatus(Position, PlayerSymbol)
    + vector<Position> getAvailableMoves()
    + vector<State*> getAllPossibleStates()
    + Position getLastPosition()
    + PlayerSymbol getCurrentPLayer()
    + void reset()
}

State --o PlayerSymbol
State --o Position
State --o BoardStatus
class RandomAgent {
    
}
package MiniMax {
    abstract Heuristics {
        
    }

    class Heuristic1 {

    }

    class Heuristic2 {

    }
    MiniMaxAgent --o State
    MCTSAgent --o State
    MiniMaxAgent --* Heuristics

}

class GameController {
    - Position InputMove(const vector<Position>&, const string&)
    - void printStatus(BoardStatus);

    + void playGameEngineEngine(Bot*, Bot*, int, int);
    + void playGameEngineHuman(Bot*, bool, int);
    + void playGameHumanHuman();
}

class Interface {
        - int mode;
        - int firstPlayer;
        - string firstPlayerAlgorithm;
        - int firstPlayerTime;
        - std::string secondPlayerAlgorithm;
        - int secondPlayerTime;
        - bool validateInput(string);
        - bool askInfoAboutBot(std::string, int);
        - int chooseFirstPlayer();
        - std::string choosePlayerAlgorithm();
        - int choosePlayerTime();

        +void welcomeScreen();
        +bool chooseMode();
        +void game();
}
GameController --o Bot
GameController --o State
Interface --* GameController

class MCTSAgent implements Bot
class MiniMaxAgent implements Bot
class RandomAgent implements Bot

class Heuristic1 implements Heuristics
class Heuristic2 implements Heuristics

@enduml